reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
shift/reduce conflict in state 28 resolved as shift.
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
reduce/reduce conflict in state 28 resolved using rule 24 (intTerm -> intFactor .).
shift/reduce conflict in state 36 resolved as shift.
shift/reduce conflict in state 36 resolved as shift.
shift/reduce conflict in state 38 resolved as shift.
shift/reduce conflict in state 38 resolved as shift.
shift/reduce conflict in state 58 resolved as shift.
shift/reduce conflict in state 58 resolved as shift.
shift/reduce conflict in state 58 resolved as shift.
shift/reduce conflict in state 69 resolved as shift.
shift/reduce conflict in state 69 resolved as shift.
shift/reduce conflict in state 71 resolved as shift.
shift/reduce conflict in state 71 resolved as shift.
shift/reduce conflict in state 84 resolved as shift.
shift/reduce conflict in state 84 resolved as shift.


Unused terminals:

   EOF_SYMBOL

Grammar

Rule 1     program -> statementSequence
Rule 2     statementSequence -> statement partialStatementSequence
Rule 3     partialStatementSequence -> statement partialStatementSequence
Rule 4     partialStatementSequence -> empty
Rule 5     statement -> partialStatement DELIMITER_SYMBOL
Rule 6     partialStatement -> declaration
Rule 7     partialStatement -> assignment
Rule 8     partialStatement -> read
Rule 9     partialStatement -> write
Rule 10    partialStatement -> empty
Rule 11    read -> READ_SYMBOL IDENTIFIER
Rule 12    write -> WRITE_SYMBOL IDENTIFIER
Rule 13    declaration -> typeName IDENTIFIER partialDeclaration
Rule 14    partialDeclaration -> COMMA_SYMBOL IDENTIFIER partialDeclaration
Rule 15    partialDeclaration -> empty
Rule 16    typeName -> INT_TYPE_SYMBOL
Rule 17    assignment -> IDENTIFIER ASSIGN_SYMBOL intExpr
Rule 18    intExpr -> MINUS_SYMBOL intTerm partialIntExpr
Rule 19    intExpr -> intTerm partialIntExpr
Rule 20    partialIntExpr -> addOp intTerm partialIntExpr
Rule 21    partialIntExpr -> empty
Rule 22    addOp -> PLUS_SYMBOL
Rule 23    addOp -> MINUS_SYMBOL
Rule 24    intTerm -> intFactor
Rule 25    intTerm -> intFactor partialIntTerm
Rule 26    partialIntTerm -> multOp intFactor partialIntTerm
Rule 27    partialIntTerm -> empty
Rule 28    intFactor -> integer
Rule 29    intFactor -> IDENTIFIER
Rule 30    intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
Rule 31    intFactor -> inlineIfStatement
Rule 32    multOp -> TIMES_SYMBOL
Rule 33    multOp -> DIVIDE_SYMBOL
Rule 34    multOp -> MODULO_SYMBOL
Rule 35    inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL
Rule 36    partialBoolExpr -> boolOp intExpr relationOp intExpr partialBoolExpr
Rule 37    partialBoolExpr -> empty
Rule 38    boolExpr -> intExpr relationOp intExpr partialBoolExpr
Rule 39    boolOp -> AND_SYMBOL
Rule 40    boolOp -> OR_SYMBOL
Rule 41    relationOp -> LT_SYMBOL
Rule 42    relationOp -> LE_SYMBOL
Rule 43    relationOp -> EQ_SYMBOL
Rule 44    relationOp -> GE_SYMBOL
Rule 45    relationOp -> GT_SYMBOL
Rule 46    relationOp -> NE_SYMBOL
Rule 47    integer -> ANY_DIGIT digits
Rule 48    digits -> ANY_DIGIT digits
Rule 49    digits -> empty
Rule 50    empty -> <empty>

Terminals, with rules where they appear

AND_SYMBOL           : 39
ANY_DIGIT            : 47 48
ASSIGN_SYMBOL        : 17
CLOSE_PARAENTHESIS_SYMBOL : 30
COMMA_SYMBOL         : 14
DELIMITER_SYMBOL     : 5
DIVIDE_SYMBOL        : 33
EOF_SYMBOL           : 
EQ_SYMBOL            : 43
GE_SYMBOL            : 44
GT_SYMBOL            : 45
IDENTIFIER           : 11 12 13 14 17 29
INLINE_ELSE_SYMBOL   : 35
INLINE_FI_SYMBOL     : 35
INLINE_IF_SYMBOL     : 35
INLINE_THEN_SYMBOL   : 35
INT_TYPE_SYMBOL      : 16
LE_SYMBOL            : 42
LT_SYMBOL            : 41
MINUS_SYMBOL         : 18 23
MODULO_SYMBOL        : 34
NE_SYMBOL            : 46
OPEN_PARAENTHESIS_SYMBOL : 30
OR_SYMBOL            : 40
PLUS_SYMBOL          : 22
READ_SYMBOL          : 11
TIMES_SYMBOL         : 32
WRITE_SYMBOL         : 12
error                : 

Nonterminals, with rules where they appear

addOp                : 20
assignment           : 7
boolExpr             : 35
boolOp               : 36
declaration          : 6
digits               : 47 48
empty                : 4 10 15 21 27 37 49
inlineIfStatement    : 31
intExpr              : 17 30 35 35 36 36 38 38
intFactor            : 24 25 26
intTerm              : 18 19 20
integer              : 28
multOp               : 26
partialBoolExpr      : 36 38
partialDeclaration   : 13 14
partialIntExpr       : 18 19 20
partialIntTerm       : 25 26
partialStatement     : 5
partialStatementSequence : 2 3
program              : 0
read                 : 8
relationOp           : 36 38
statement            : 2 3
statementSequence    : 1
typeName             : 13
write                : 9


Parsing method: SLR


state 0

    (0) S' -> . program
    (1) program -> . statementSequence
    (2) statementSequence -> . statement partialStatementSequence
    (5) statement -> . partialStatement DELIMITER_SYMBOL
    (6) partialStatement -> . declaration
    (7) partialStatement -> . assignment
    (8) partialStatement -> . read
    (9) partialStatement -> . write
    (10) partialStatement -> . empty
    (13) declaration -> . typeName IDENTIFIER partialDeclaration
    (17) assignment -> . IDENTIFIER ASSIGN_SYMBOL intExpr
    (11) read -> . READ_SYMBOL IDENTIFIER
    (12) write -> . WRITE_SYMBOL IDENTIFIER
    (50) empty -> .
    (16) typeName -> . INT_TYPE_SYMBOL

    IDENTIFIER      shift and go to state 14
    READ_SYMBOL     shift and go to state 5
    WRITE_SYMBOL    shift and go to state 1
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)
    INT_TYPE_SYMBOL shift and go to state 9


    assignment      shift and go to state 2
    typeName        shift and go to state 3
    read            shift and go to state 4
    write           shift and go to state 7
    statementSequence shift and go to state 8
    program         shift and go to state 10
    empty           shift and go to state 6
    statement       shift and go to state 12
    declaration     shift and go to state 13
    partialStatement shift and go to state 11

state 1

    (12) write -> WRITE_SYMBOL . IDENTIFIER

    IDENTIFIER      shift and go to state 15



state 2

    (7) partialStatement -> assignment .

    DELIMITER_SYMBOL reduce using rule 7 (partialStatement -> assignment .)



state 3

    (13) declaration -> typeName . IDENTIFIER partialDeclaration

    IDENTIFIER      shift and go to state 16



state 4

    (8) partialStatement -> read .

    DELIMITER_SYMBOL reduce using rule 8 (partialStatement -> read .)



state 5

    (11) read -> READ_SYMBOL . IDENTIFIER

    IDENTIFIER      shift and go to state 17



state 6

    (10) partialStatement -> empty .

    DELIMITER_SYMBOL reduce using rule 10 (partialStatement -> empty .)



state 7

    (9) partialStatement -> write .

    DELIMITER_SYMBOL reduce using rule 9 (partialStatement -> write .)



state 8

    (1) program -> statementSequence .

    $               reduce using rule 1 (program -> statementSequence .)



state 9

    (16) typeName -> INT_TYPE_SYMBOL .

    IDENTIFIER      reduce using rule 16 (typeName -> INT_TYPE_SYMBOL .)



state 10

    (0) S' -> program .




state 11

    (5) statement -> partialStatement . DELIMITER_SYMBOL

    DELIMITER_SYMBOL shift and go to state 18



state 12

    (2) statementSequence -> statement . partialStatementSequence
    (3) partialStatementSequence -> . statement partialStatementSequence
    (4) partialStatementSequence -> . empty
    (5) statement -> . partialStatement DELIMITER_SYMBOL
    (50) empty -> .
    (6) partialStatement -> . declaration
    (7) partialStatement -> . assignment
    (8) partialStatement -> . read
    (9) partialStatement -> . write
    (10) partialStatement -> . empty
    (13) declaration -> . typeName IDENTIFIER partialDeclaration
    (17) assignment -> . IDENTIFIER ASSIGN_SYMBOL intExpr
    (11) read -> . READ_SYMBOL IDENTIFIER
    (12) write -> . WRITE_SYMBOL IDENTIFIER
    (16) typeName -> . INT_TYPE_SYMBOL

    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)
    IDENTIFIER      shift and go to state 14
    READ_SYMBOL     shift and go to state 5
    WRITE_SYMBOL    shift and go to state 1
    INT_TYPE_SYMBOL shift and go to state 9


    read            shift and go to state 4
    partialStatementSequence shift and go to state 19
    declaration     shift and go to state 13
    write           shift and go to state 7
    typeName        shift and go to state 3
    empty           shift and go to state 20
    statement       shift and go to state 21
    assignment      shift and go to state 2
    partialStatement shift and go to state 11

state 13

    (6) partialStatement -> declaration .

    DELIMITER_SYMBOL reduce using rule 6 (partialStatement -> declaration .)



state 14

    (17) assignment -> IDENTIFIER . ASSIGN_SYMBOL intExpr

    ASSIGN_SYMBOL   shift and go to state 22



state 15

    (12) write -> WRITE_SYMBOL IDENTIFIER .

    DELIMITER_SYMBOL reduce using rule 12 (write -> WRITE_SYMBOL IDENTIFIER .)



state 16

    (13) declaration -> typeName IDENTIFIER . partialDeclaration
    (14) partialDeclaration -> . COMMA_SYMBOL IDENTIFIER partialDeclaration
    (15) partialDeclaration -> . empty
    (50) empty -> .

    COMMA_SYMBOL    shift and go to state 23
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)


    empty           shift and go to state 24
    partialDeclaration shift and go to state 25

state 17

    (11) read -> READ_SYMBOL IDENTIFIER .

    DELIMITER_SYMBOL reduce using rule 11 (read -> READ_SYMBOL IDENTIFIER .)



state 18

    (5) statement -> partialStatement DELIMITER_SYMBOL .

    IDENTIFIER      reduce using rule 5 (statement -> partialStatement DELIMITER_SYMBOL .)
    READ_SYMBOL     reduce using rule 5 (statement -> partialStatement DELIMITER_SYMBOL .)
    WRITE_SYMBOL    reduce using rule 5 (statement -> partialStatement DELIMITER_SYMBOL .)
    DELIMITER_SYMBOL reduce using rule 5 (statement -> partialStatement DELIMITER_SYMBOL .)
    INT_TYPE_SYMBOL reduce using rule 5 (statement -> partialStatement DELIMITER_SYMBOL .)
    $               reduce using rule 5 (statement -> partialStatement DELIMITER_SYMBOL .)



state 19

    (2) statementSequence -> statement partialStatementSequence .

    $               reduce using rule 2 (statementSequence -> statement partialStatementSequence .)



state 20

    (4) partialStatementSequence -> empty .
    (10) partialStatement -> empty .

    $               reduce using rule 4 (partialStatementSequence -> empty .)
    DELIMITER_SYMBOL reduce using rule 10 (partialStatement -> empty .)



state 21

    (3) partialStatementSequence -> statement . partialStatementSequence
    (3) partialStatementSequence -> . statement partialStatementSequence
    (4) partialStatementSequence -> . empty
    (5) statement -> . partialStatement DELIMITER_SYMBOL
    (50) empty -> .
    (6) partialStatement -> . declaration
    (7) partialStatement -> . assignment
    (8) partialStatement -> . read
    (9) partialStatement -> . write
    (10) partialStatement -> . empty
    (13) declaration -> . typeName IDENTIFIER partialDeclaration
    (17) assignment -> . IDENTIFIER ASSIGN_SYMBOL intExpr
    (11) read -> . READ_SYMBOL IDENTIFIER
    (12) write -> . WRITE_SYMBOL IDENTIFIER
    (16) typeName -> . INT_TYPE_SYMBOL

    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)
    IDENTIFIER      shift and go to state 14
    READ_SYMBOL     shift and go to state 5
    WRITE_SYMBOL    shift and go to state 1
    INT_TYPE_SYMBOL shift and go to state 9


    read            shift and go to state 4
    partialStatementSequence shift and go to state 26
    declaration     shift and go to state 13
    write           shift and go to state 7
    typeName        shift and go to state 3
    empty           shift and go to state 20
    statement       shift and go to state 21
    assignment      shift and go to state 2
    partialStatement shift and go to state 11

state 22

    (17) assignment -> IDENTIFIER ASSIGN_SYMBOL . intExpr
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 28
    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 33
    intTerm         shift and go to state 36
    integer         shift and go to state 34

state 23

    (14) partialDeclaration -> COMMA_SYMBOL . IDENTIFIER partialDeclaration

    IDENTIFIER      shift and go to state 37



state 24

    (15) partialDeclaration -> empty .

    DELIMITER_SYMBOL reduce using rule 15 (partialDeclaration -> empty .)



state 25

    (13) declaration -> typeName IDENTIFIER partialDeclaration .

    DELIMITER_SYMBOL reduce using rule 13 (declaration -> typeName IDENTIFIER partialDeclaration .)



state 26

    (3) partialStatementSequence -> statement partialStatementSequence .

    $               reduce using rule 3 (partialStatementSequence -> statement partialStatementSequence .)



state 27

    (18) intExpr -> MINUS_SYMBOL . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 28
    inlineIfStatement shift and go to state 29
    intTerm         shift and go to state 38
    integer         shift and go to state 34

state 28

    (24) intTerm -> intFactor .
    (25) intTerm -> intFactor . partialIntTerm
    (26) partialIntTerm -> . multOp intFactor partialIntTerm
    (27) partialIntTerm -> . empty
    (32) multOp -> . TIMES_SYMBOL
    (33) multOp -> . DIVIDE_SYMBOL
    (34) multOp -> . MODULO_SYMBOL
    (50) empty -> .

  ! reduce/reduce conflict for DELIMITER_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for PLUS_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for MINUS_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! shift/reduce conflict for TIMES_SYMBOL resolved as shift.
  ! shift/reduce conflict for DIVIDE_SYMBOL resolved as shift.
  ! shift/reduce conflict for MODULO_SYMBOL resolved as shift.
  ! reduce/reduce conflict for CLOSE_PARAENTHESIS_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for INLINE_ELSE_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for INLINE_FI_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for LT_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for LE_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for EQ_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for GE_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for GT_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for NE_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for AND_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for OR_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
  ! reduce/reduce conflict for INLINE_THEN_SYMBOL resolved using rule 24 (intTerm -> intFactor .).
    PLUS_SYMBOL     reduce using rule 24 (intTerm -> intFactor .)
    MINUS_SYMBOL    reduce using rule 24 (intTerm -> intFactor .)
    DELIMITER_SYMBOL reduce using rule 24 (intTerm -> intFactor .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 24 (intTerm -> intFactor .)
    INLINE_ELSE_SYMBOL reduce using rule 24 (intTerm -> intFactor .)
    INLINE_FI_SYMBOL reduce using rule 24 (intTerm -> intFactor .)
    LT_SYMBOL       reduce using rule 24 (intTerm -> intFactor .)
    LE_SYMBOL       reduce using rule 24 (intTerm -> intFactor .)
    EQ_SYMBOL       reduce using rule 24 (intTerm -> intFactor .)
    GE_SYMBOL       reduce using rule 24 (intTerm -> intFactor .)
    GT_SYMBOL       reduce using rule 24 (intTerm -> intFactor .)
    NE_SYMBOL       reduce using rule 24 (intTerm -> intFactor .)
    AND_SYMBOL      reduce using rule 24 (intTerm -> intFactor .)
    OR_SYMBOL       reduce using rule 24 (intTerm -> intFactor .)
    INLINE_THEN_SYMBOL reduce using rule 24 (intTerm -> intFactor .)
    TIMES_SYMBOL    shift and go to state 40
    DIVIDE_SYMBOL   shift and go to state 43
    MODULO_SYMBOL   shift and go to state 41
    $               reduce using rule 50 (empty -> .)

  ! DELIMITER_SYMBOL [ reduce using rule 50 (empty -> .) ]
  ! PLUS_SYMBOL     [ reduce using rule 50 (empty -> .) ]
  ! MINUS_SYMBOL    [ reduce using rule 50 (empty -> .) ]
  ! TIMES_SYMBOL    [ reduce using rule 50 (empty -> .) ]
  ! DIVIDE_SYMBOL   [ reduce using rule 50 (empty -> .) ]
  ! MODULO_SYMBOL   [ reduce using rule 50 (empty -> .) ]
  ! CLOSE_PARAENTHESIS_SYMBOL [ reduce using rule 50 (empty -> .) ]
  ! INLINE_ELSE_SYMBOL [ reduce using rule 50 (empty -> .) ]
  ! INLINE_FI_SYMBOL [ reduce using rule 50 (empty -> .) ]
  ! LT_SYMBOL       [ reduce using rule 50 (empty -> .) ]
  ! LE_SYMBOL       [ reduce using rule 50 (empty -> .) ]
  ! EQ_SYMBOL       [ reduce using rule 50 (empty -> .) ]
  ! GE_SYMBOL       [ reduce using rule 50 (empty -> .) ]
  ! GT_SYMBOL       [ reduce using rule 50 (empty -> .) ]
  ! NE_SYMBOL       [ reduce using rule 50 (empty -> .) ]
  ! AND_SYMBOL      [ reduce using rule 50 (empty -> .) ]
  ! OR_SYMBOL       [ reduce using rule 50 (empty -> .) ]
  ! INLINE_THEN_SYMBOL [ reduce using rule 50 (empty -> .) ]

    empty           shift and go to state 44
    multOp          shift and go to state 42
    partialIntTerm  shift and go to state 39

state 29

    (31) intFactor -> inlineIfStatement .

    PLUS_SYMBOL     reduce using rule 31 (intFactor -> inlineIfStatement .)
    MINUS_SYMBOL    reduce using rule 31 (intFactor -> inlineIfStatement .)
    DELIMITER_SYMBOL reduce using rule 31 (intFactor -> inlineIfStatement .)
    TIMES_SYMBOL    reduce using rule 31 (intFactor -> inlineIfStatement .)
    DIVIDE_SYMBOL   reduce using rule 31 (intFactor -> inlineIfStatement .)
    MODULO_SYMBOL   reduce using rule 31 (intFactor -> inlineIfStatement .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 31 (intFactor -> inlineIfStatement .)
    INLINE_ELSE_SYMBOL reduce using rule 31 (intFactor -> inlineIfStatement .)
    INLINE_FI_SYMBOL reduce using rule 31 (intFactor -> inlineIfStatement .)
    LT_SYMBOL       reduce using rule 31 (intFactor -> inlineIfStatement .)
    LE_SYMBOL       reduce using rule 31 (intFactor -> inlineIfStatement .)
    EQ_SYMBOL       reduce using rule 31 (intFactor -> inlineIfStatement .)
    GE_SYMBOL       reduce using rule 31 (intFactor -> inlineIfStatement .)
    GT_SYMBOL       reduce using rule 31 (intFactor -> inlineIfStatement .)
    NE_SYMBOL       reduce using rule 31 (intFactor -> inlineIfStatement .)
    AND_SYMBOL      reduce using rule 31 (intFactor -> inlineIfStatement .)
    OR_SYMBOL       reduce using rule 31 (intFactor -> inlineIfStatement .)
    INLINE_THEN_SYMBOL reduce using rule 31 (intFactor -> inlineIfStatement .)



state 30

    (35) inlineIfStatement -> INLINE_IF_SYMBOL . boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL
    (38) boolExpr -> . intExpr relationOp intExpr partialBoolExpr
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 45
    boolExpr        shift and go to state 46
    intFactor       shift and go to state 28
    integer         shift and go to state 34
    intTerm         shift and go to state 36

state 31

    (30) intFactor -> OPEN_PARAENTHESIS_SYMBOL . intExpr CLOSE_PARAENTHESIS_SYMBOL
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 28
    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 47
    intTerm         shift and go to state 36
    integer         shift and go to state 34

state 32

    (47) integer -> ANY_DIGIT . digits
    (48) digits -> . ANY_DIGIT digits
    (49) digits -> . empty
    (50) empty -> .

    ANY_DIGIT       shift and go to state 49
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)


    digits          shift and go to state 48
    empty           shift and go to state 50

state 33

    (17) assignment -> IDENTIFIER ASSIGN_SYMBOL intExpr .

    DELIMITER_SYMBOL reduce using rule 17 (assignment -> IDENTIFIER ASSIGN_SYMBOL intExpr .)



state 34

    (28) intFactor -> integer .

    PLUS_SYMBOL     reduce using rule 28 (intFactor -> integer .)
    MINUS_SYMBOL    reduce using rule 28 (intFactor -> integer .)
    DELIMITER_SYMBOL reduce using rule 28 (intFactor -> integer .)
    TIMES_SYMBOL    reduce using rule 28 (intFactor -> integer .)
    DIVIDE_SYMBOL   reduce using rule 28 (intFactor -> integer .)
    MODULO_SYMBOL   reduce using rule 28 (intFactor -> integer .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 28 (intFactor -> integer .)
    INLINE_ELSE_SYMBOL reduce using rule 28 (intFactor -> integer .)
    INLINE_FI_SYMBOL reduce using rule 28 (intFactor -> integer .)
    LT_SYMBOL       reduce using rule 28 (intFactor -> integer .)
    LE_SYMBOL       reduce using rule 28 (intFactor -> integer .)
    EQ_SYMBOL       reduce using rule 28 (intFactor -> integer .)
    GE_SYMBOL       reduce using rule 28 (intFactor -> integer .)
    GT_SYMBOL       reduce using rule 28 (intFactor -> integer .)
    NE_SYMBOL       reduce using rule 28 (intFactor -> integer .)
    AND_SYMBOL      reduce using rule 28 (intFactor -> integer .)
    OR_SYMBOL       reduce using rule 28 (intFactor -> integer .)
    INLINE_THEN_SYMBOL reduce using rule 28 (intFactor -> integer .)



state 35

    (29) intFactor -> IDENTIFIER .

    PLUS_SYMBOL     reduce using rule 29 (intFactor -> IDENTIFIER .)
    MINUS_SYMBOL    reduce using rule 29 (intFactor -> IDENTIFIER .)
    DELIMITER_SYMBOL reduce using rule 29 (intFactor -> IDENTIFIER .)
    TIMES_SYMBOL    reduce using rule 29 (intFactor -> IDENTIFIER .)
    DIVIDE_SYMBOL   reduce using rule 29 (intFactor -> IDENTIFIER .)
    MODULO_SYMBOL   reduce using rule 29 (intFactor -> IDENTIFIER .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 29 (intFactor -> IDENTIFIER .)
    INLINE_ELSE_SYMBOL reduce using rule 29 (intFactor -> IDENTIFIER .)
    INLINE_FI_SYMBOL reduce using rule 29 (intFactor -> IDENTIFIER .)
    LT_SYMBOL       reduce using rule 29 (intFactor -> IDENTIFIER .)
    LE_SYMBOL       reduce using rule 29 (intFactor -> IDENTIFIER .)
    EQ_SYMBOL       reduce using rule 29 (intFactor -> IDENTIFIER .)
    GE_SYMBOL       reduce using rule 29 (intFactor -> IDENTIFIER .)
    GT_SYMBOL       reduce using rule 29 (intFactor -> IDENTIFIER .)
    NE_SYMBOL       reduce using rule 29 (intFactor -> IDENTIFIER .)
    AND_SYMBOL      reduce using rule 29 (intFactor -> IDENTIFIER .)
    OR_SYMBOL       reduce using rule 29 (intFactor -> IDENTIFIER .)
    INLINE_THEN_SYMBOL reduce using rule 29 (intFactor -> IDENTIFIER .)



state 36

    (19) intExpr -> intTerm . partialIntExpr
    (20) partialIntExpr -> . addOp intTerm partialIntExpr
    (21) partialIntExpr -> . empty
    (22) addOp -> . PLUS_SYMBOL
    (23) addOp -> . MINUS_SYMBOL
    (50) empty -> .

  ! shift/reduce conflict for PLUS_SYMBOL resolved as shift.
  ! shift/reduce conflict for MINUS_SYMBOL resolved as shift.
    PLUS_SYMBOL     shift and go to state 53
    MINUS_SYMBOL    shift and go to state 52
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)

  ! PLUS_SYMBOL     [ reduce using rule 50 (empty -> .) ]
  ! MINUS_SYMBOL    [ reduce using rule 50 (empty -> .) ]

    partialIntExpr  shift and go to state 51
    empty           shift and go to state 55
    addOp           shift and go to state 54

state 37

    (14) partialDeclaration -> COMMA_SYMBOL IDENTIFIER . partialDeclaration
    (14) partialDeclaration -> . COMMA_SYMBOL IDENTIFIER partialDeclaration
    (15) partialDeclaration -> . empty
    (50) empty -> .

    COMMA_SYMBOL    shift and go to state 23
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)


    empty           shift and go to state 24
    partialDeclaration shift and go to state 56

state 38

    (18) intExpr -> MINUS_SYMBOL intTerm . partialIntExpr
    (20) partialIntExpr -> . addOp intTerm partialIntExpr
    (21) partialIntExpr -> . empty
    (22) addOp -> . PLUS_SYMBOL
    (23) addOp -> . MINUS_SYMBOL
    (50) empty -> .

  ! shift/reduce conflict for PLUS_SYMBOL resolved as shift.
  ! shift/reduce conflict for MINUS_SYMBOL resolved as shift.
    PLUS_SYMBOL     shift and go to state 53
    MINUS_SYMBOL    shift and go to state 52
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)

  ! PLUS_SYMBOL     [ reduce using rule 50 (empty -> .) ]
  ! MINUS_SYMBOL    [ reduce using rule 50 (empty -> .) ]

    partialIntExpr  shift and go to state 57
    empty           shift and go to state 55
    addOp           shift and go to state 54

state 39

    (25) intTerm -> intFactor partialIntTerm .

    PLUS_SYMBOL     reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    MINUS_SYMBOL    reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    DELIMITER_SYMBOL reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    INLINE_ELSE_SYMBOL reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    INLINE_FI_SYMBOL reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    LT_SYMBOL       reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    LE_SYMBOL       reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    EQ_SYMBOL       reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    GE_SYMBOL       reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    GT_SYMBOL       reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    NE_SYMBOL       reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    AND_SYMBOL      reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    OR_SYMBOL       reduce using rule 25 (intTerm -> intFactor partialIntTerm .)
    INLINE_THEN_SYMBOL reduce using rule 25 (intTerm -> intFactor partialIntTerm .)



state 40

    (32) multOp -> TIMES_SYMBOL .

    IDENTIFIER      reduce using rule 32 (multOp -> TIMES_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 32 (multOp -> TIMES_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 32 (multOp -> TIMES_SYMBOL .)
    ANY_DIGIT       reduce using rule 32 (multOp -> TIMES_SYMBOL .)



state 41

    (34) multOp -> MODULO_SYMBOL .

    IDENTIFIER      reduce using rule 34 (multOp -> MODULO_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 34 (multOp -> MODULO_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 34 (multOp -> MODULO_SYMBOL .)
    ANY_DIGIT       reduce using rule 34 (multOp -> MODULO_SYMBOL .)



state 42

    (26) partialIntTerm -> multOp . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 58
    inlineIfStatement shift and go to state 29
    integer         shift and go to state 34

state 43

    (33) multOp -> DIVIDE_SYMBOL .

    IDENTIFIER      reduce using rule 33 (multOp -> DIVIDE_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 33 (multOp -> DIVIDE_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 33 (multOp -> DIVIDE_SYMBOL .)
    ANY_DIGIT       reduce using rule 33 (multOp -> DIVIDE_SYMBOL .)



state 44

    (27) partialIntTerm -> empty .

    PLUS_SYMBOL     reduce using rule 27 (partialIntTerm -> empty .)
    MINUS_SYMBOL    reduce using rule 27 (partialIntTerm -> empty .)
    DELIMITER_SYMBOL reduce using rule 27 (partialIntTerm -> empty .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 27 (partialIntTerm -> empty .)
    INLINE_ELSE_SYMBOL reduce using rule 27 (partialIntTerm -> empty .)
    INLINE_FI_SYMBOL reduce using rule 27 (partialIntTerm -> empty .)
    LT_SYMBOL       reduce using rule 27 (partialIntTerm -> empty .)
    LE_SYMBOL       reduce using rule 27 (partialIntTerm -> empty .)
    EQ_SYMBOL       reduce using rule 27 (partialIntTerm -> empty .)
    GE_SYMBOL       reduce using rule 27 (partialIntTerm -> empty .)
    GT_SYMBOL       reduce using rule 27 (partialIntTerm -> empty .)
    NE_SYMBOL       reduce using rule 27 (partialIntTerm -> empty .)
    AND_SYMBOL      reduce using rule 27 (partialIntTerm -> empty .)
    OR_SYMBOL       reduce using rule 27 (partialIntTerm -> empty .)
    INLINE_THEN_SYMBOL reduce using rule 27 (partialIntTerm -> empty .)



state 45

    (38) boolExpr -> intExpr . relationOp intExpr partialBoolExpr
    (41) relationOp -> . LT_SYMBOL
    (42) relationOp -> . LE_SYMBOL
    (43) relationOp -> . EQ_SYMBOL
    (44) relationOp -> . GE_SYMBOL
    (45) relationOp -> . GT_SYMBOL
    (46) relationOp -> . NE_SYMBOL

    LT_SYMBOL       shift and go to state 61
    LE_SYMBOL       shift and go to state 60
    EQ_SYMBOL       shift and go to state 63
    GE_SYMBOL       shift and go to state 65
    GT_SYMBOL       shift and go to state 64
    NE_SYMBOL       shift and go to state 59


    relationOp      shift and go to state 62

state 46

    (35) inlineIfStatement -> INLINE_IF_SYMBOL boolExpr . INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    INLINE_THEN_SYMBOL shift and go to state 66



state 47

    (30) intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr . CLOSE_PARAENTHESIS_SYMBOL

    CLOSE_PARAENTHESIS_SYMBOL shift and go to state 67



state 48

    (47) integer -> ANY_DIGIT digits .

    PLUS_SYMBOL     reduce using rule 47 (integer -> ANY_DIGIT digits .)
    MINUS_SYMBOL    reduce using rule 47 (integer -> ANY_DIGIT digits .)
    DELIMITER_SYMBOL reduce using rule 47 (integer -> ANY_DIGIT digits .)
    TIMES_SYMBOL    reduce using rule 47 (integer -> ANY_DIGIT digits .)
    DIVIDE_SYMBOL   reduce using rule 47 (integer -> ANY_DIGIT digits .)
    MODULO_SYMBOL   reduce using rule 47 (integer -> ANY_DIGIT digits .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 47 (integer -> ANY_DIGIT digits .)
    INLINE_ELSE_SYMBOL reduce using rule 47 (integer -> ANY_DIGIT digits .)
    INLINE_FI_SYMBOL reduce using rule 47 (integer -> ANY_DIGIT digits .)
    LT_SYMBOL       reduce using rule 47 (integer -> ANY_DIGIT digits .)
    LE_SYMBOL       reduce using rule 47 (integer -> ANY_DIGIT digits .)
    EQ_SYMBOL       reduce using rule 47 (integer -> ANY_DIGIT digits .)
    GE_SYMBOL       reduce using rule 47 (integer -> ANY_DIGIT digits .)
    GT_SYMBOL       reduce using rule 47 (integer -> ANY_DIGIT digits .)
    NE_SYMBOL       reduce using rule 47 (integer -> ANY_DIGIT digits .)
    AND_SYMBOL      reduce using rule 47 (integer -> ANY_DIGIT digits .)
    OR_SYMBOL       reduce using rule 47 (integer -> ANY_DIGIT digits .)
    INLINE_THEN_SYMBOL reduce using rule 47 (integer -> ANY_DIGIT digits .)



state 49

    (48) digits -> ANY_DIGIT . digits
    (48) digits -> . ANY_DIGIT digits
    (49) digits -> . empty
    (50) empty -> .

    ANY_DIGIT       shift and go to state 49
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)


    digits          shift and go to state 68
    empty           shift and go to state 50

state 50

    (49) digits -> empty .

    PLUS_SYMBOL     reduce using rule 49 (digits -> empty .)
    MINUS_SYMBOL    reduce using rule 49 (digits -> empty .)
    DELIMITER_SYMBOL reduce using rule 49 (digits -> empty .)
    TIMES_SYMBOL    reduce using rule 49 (digits -> empty .)
    DIVIDE_SYMBOL   reduce using rule 49 (digits -> empty .)
    MODULO_SYMBOL   reduce using rule 49 (digits -> empty .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 49 (digits -> empty .)
    INLINE_ELSE_SYMBOL reduce using rule 49 (digits -> empty .)
    INLINE_FI_SYMBOL reduce using rule 49 (digits -> empty .)
    LT_SYMBOL       reduce using rule 49 (digits -> empty .)
    LE_SYMBOL       reduce using rule 49 (digits -> empty .)
    EQ_SYMBOL       reduce using rule 49 (digits -> empty .)
    GE_SYMBOL       reduce using rule 49 (digits -> empty .)
    GT_SYMBOL       reduce using rule 49 (digits -> empty .)
    NE_SYMBOL       reduce using rule 49 (digits -> empty .)
    AND_SYMBOL      reduce using rule 49 (digits -> empty .)
    OR_SYMBOL       reduce using rule 49 (digits -> empty .)
    INLINE_THEN_SYMBOL reduce using rule 49 (digits -> empty .)



state 51

    (19) intExpr -> intTerm partialIntExpr .

    DELIMITER_SYMBOL reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    INLINE_ELSE_SYMBOL reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    INLINE_FI_SYMBOL reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    LT_SYMBOL       reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    LE_SYMBOL       reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    EQ_SYMBOL       reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    GE_SYMBOL       reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    GT_SYMBOL       reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    NE_SYMBOL       reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    AND_SYMBOL      reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    OR_SYMBOL       reduce using rule 19 (intExpr -> intTerm partialIntExpr .)
    INLINE_THEN_SYMBOL reduce using rule 19 (intExpr -> intTerm partialIntExpr .)



state 52

    (23) addOp -> MINUS_SYMBOL .

    IDENTIFIER      reduce using rule 23 (addOp -> MINUS_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 23 (addOp -> MINUS_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 23 (addOp -> MINUS_SYMBOL .)
    ANY_DIGIT       reduce using rule 23 (addOp -> MINUS_SYMBOL .)



state 53

    (22) addOp -> PLUS_SYMBOL .

    IDENTIFIER      reduce using rule 22 (addOp -> PLUS_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 22 (addOp -> PLUS_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 22 (addOp -> PLUS_SYMBOL .)
    ANY_DIGIT       reduce using rule 22 (addOp -> PLUS_SYMBOL .)



state 54

    (20) partialIntExpr -> addOp . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 28
    inlineIfStatement shift and go to state 29
    intTerm         shift and go to state 69
    integer         shift and go to state 34

state 55

    (21) partialIntExpr -> empty .

    DELIMITER_SYMBOL reduce using rule 21 (partialIntExpr -> empty .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 21 (partialIntExpr -> empty .)
    INLINE_ELSE_SYMBOL reduce using rule 21 (partialIntExpr -> empty .)
    INLINE_FI_SYMBOL reduce using rule 21 (partialIntExpr -> empty .)
    LT_SYMBOL       reduce using rule 21 (partialIntExpr -> empty .)
    LE_SYMBOL       reduce using rule 21 (partialIntExpr -> empty .)
    EQ_SYMBOL       reduce using rule 21 (partialIntExpr -> empty .)
    GE_SYMBOL       reduce using rule 21 (partialIntExpr -> empty .)
    GT_SYMBOL       reduce using rule 21 (partialIntExpr -> empty .)
    NE_SYMBOL       reduce using rule 21 (partialIntExpr -> empty .)
    AND_SYMBOL      reduce using rule 21 (partialIntExpr -> empty .)
    OR_SYMBOL       reduce using rule 21 (partialIntExpr -> empty .)
    INLINE_THEN_SYMBOL reduce using rule 21 (partialIntExpr -> empty .)



state 56

    (14) partialDeclaration -> COMMA_SYMBOL IDENTIFIER partialDeclaration .

    DELIMITER_SYMBOL reduce using rule 14 (partialDeclaration -> COMMA_SYMBOL IDENTIFIER partialDeclaration .)



state 57

    (18) intExpr -> MINUS_SYMBOL intTerm partialIntExpr .

    DELIMITER_SYMBOL reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    INLINE_ELSE_SYMBOL reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    INLINE_FI_SYMBOL reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    LT_SYMBOL       reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    LE_SYMBOL       reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    EQ_SYMBOL       reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    GE_SYMBOL       reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    GT_SYMBOL       reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    NE_SYMBOL       reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    AND_SYMBOL      reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    OR_SYMBOL       reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)
    INLINE_THEN_SYMBOL reduce using rule 18 (intExpr -> MINUS_SYMBOL intTerm partialIntExpr .)



state 58

    (26) partialIntTerm -> multOp intFactor . partialIntTerm
    (26) partialIntTerm -> . multOp intFactor partialIntTerm
    (27) partialIntTerm -> . empty
    (32) multOp -> . TIMES_SYMBOL
    (33) multOp -> . DIVIDE_SYMBOL
    (34) multOp -> . MODULO_SYMBOL
    (50) empty -> .

  ! shift/reduce conflict for TIMES_SYMBOL resolved as shift.
  ! shift/reduce conflict for DIVIDE_SYMBOL resolved as shift.
  ! shift/reduce conflict for MODULO_SYMBOL resolved as shift.
    TIMES_SYMBOL    shift and go to state 40
    DIVIDE_SYMBOL   shift and go to state 43
    MODULO_SYMBOL   shift and go to state 41
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)

  ! TIMES_SYMBOL    [ reduce using rule 50 (empty -> .) ]
  ! DIVIDE_SYMBOL   [ reduce using rule 50 (empty -> .) ]
  ! MODULO_SYMBOL   [ reduce using rule 50 (empty -> .) ]

    empty           shift and go to state 44
    multOp          shift and go to state 42
    partialIntTerm  shift and go to state 70

state 59

    (46) relationOp -> NE_SYMBOL .

    MINUS_SYMBOL    reduce using rule 46 (relationOp -> NE_SYMBOL .)
    IDENTIFIER      reduce using rule 46 (relationOp -> NE_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 46 (relationOp -> NE_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 46 (relationOp -> NE_SYMBOL .)
    ANY_DIGIT       reduce using rule 46 (relationOp -> NE_SYMBOL .)



state 60

    (42) relationOp -> LE_SYMBOL .

    MINUS_SYMBOL    reduce using rule 42 (relationOp -> LE_SYMBOL .)
    IDENTIFIER      reduce using rule 42 (relationOp -> LE_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 42 (relationOp -> LE_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 42 (relationOp -> LE_SYMBOL .)
    ANY_DIGIT       reduce using rule 42 (relationOp -> LE_SYMBOL .)



state 61

    (41) relationOp -> LT_SYMBOL .

    MINUS_SYMBOL    reduce using rule 41 (relationOp -> LT_SYMBOL .)
    IDENTIFIER      reduce using rule 41 (relationOp -> LT_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 41 (relationOp -> LT_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 41 (relationOp -> LT_SYMBOL .)
    ANY_DIGIT       reduce using rule 41 (relationOp -> LT_SYMBOL .)



state 62

    (38) boolExpr -> intExpr relationOp . intExpr partialBoolExpr
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 28
    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 71
    integer         shift and go to state 34
    intTerm         shift and go to state 36

state 63

    (43) relationOp -> EQ_SYMBOL .

    MINUS_SYMBOL    reduce using rule 43 (relationOp -> EQ_SYMBOL .)
    IDENTIFIER      reduce using rule 43 (relationOp -> EQ_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 43 (relationOp -> EQ_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 43 (relationOp -> EQ_SYMBOL .)
    ANY_DIGIT       reduce using rule 43 (relationOp -> EQ_SYMBOL .)



state 64

    (45) relationOp -> GT_SYMBOL .

    MINUS_SYMBOL    reduce using rule 45 (relationOp -> GT_SYMBOL .)
    IDENTIFIER      reduce using rule 45 (relationOp -> GT_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 45 (relationOp -> GT_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 45 (relationOp -> GT_SYMBOL .)
    ANY_DIGIT       reduce using rule 45 (relationOp -> GT_SYMBOL .)



state 65

    (44) relationOp -> GE_SYMBOL .

    MINUS_SYMBOL    reduce using rule 44 (relationOp -> GE_SYMBOL .)
    IDENTIFIER      reduce using rule 44 (relationOp -> GE_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 44 (relationOp -> GE_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 44 (relationOp -> GE_SYMBOL .)
    ANY_DIGIT       reduce using rule 44 (relationOp -> GE_SYMBOL .)



state 66

    (35) inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL . intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 28
    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 72
    integer         shift and go to state 34
    intTerm         shift and go to state 36

state 67

    (30) intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .

    PLUS_SYMBOL     reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    MINUS_SYMBOL    reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    DELIMITER_SYMBOL reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    TIMES_SYMBOL    reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    DIVIDE_SYMBOL   reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    MODULO_SYMBOL   reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    INLINE_ELSE_SYMBOL reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    INLINE_FI_SYMBOL reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    LT_SYMBOL       reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    LE_SYMBOL       reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    EQ_SYMBOL       reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    GE_SYMBOL       reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    GT_SYMBOL       reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    NE_SYMBOL       reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    AND_SYMBOL      reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    OR_SYMBOL       reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)
    INLINE_THEN_SYMBOL reduce using rule 30 (intFactor -> OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL .)



state 68

    (48) digits -> ANY_DIGIT digits .

    PLUS_SYMBOL     reduce using rule 48 (digits -> ANY_DIGIT digits .)
    MINUS_SYMBOL    reduce using rule 48 (digits -> ANY_DIGIT digits .)
    DELIMITER_SYMBOL reduce using rule 48 (digits -> ANY_DIGIT digits .)
    TIMES_SYMBOL    reduce using rule 48 (digits -> ANY_DIGIT digits .)
    DIVIDE_SYMBOL   reduce using rule 48 (digits -> ANY_DIGIT digits .)
    MODULO_SYMBOL   reduce using rule 48 (digits -> ANY_DIGIT digits .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 48 (digits -> ANY_DIGIT digits .)
    INLINE_ELSE_SYMBOL reduce using rule 48 (digits -> ANY_DIGIT digits .)
    INLINE_FI_SYMBOL reduce using rule 48 (digits -> ANY_DIGIT digits .)
    LT_SYMBOL       reduce using rule 48 (digits -> ANY_DIGIT digits .)
    LE_SYMBOL       reduce using rule 48 (digits -> ANY_DIGIT digits .)
    EQ_SYMBOL       reduce using rule 48 (digits -> ANY_DIGIT digits .)
    GE_SYMBOL       reduce using rule 48 (digits -> ANY_DIGIT digits .)
    GT_SYMBOL       reduce using rule 48 (digits -> ANY_DIGIT digits .)
    NE_SYMBOL       reduce using rule 48 (digits -> ANY_DIGIT digits .)
    AND_SYMBOL      reduce using rule 48 (digits -> ANY_DIGIT digits .)
    OR_SYMBOL       reduce using rule 48 (digits -> ANY_DIGIT digits .)
    INLINE_THEN_SYMBOL reduce using rule 48 (digits -> ANY_DIGIT digits .)



state 69

    (20) partialIntExpr -> addOp intTerm . partialIntExpr
    (20) partialIntExpr -> . addOp intTerm partialIntExpr
    (21) partialIntExpr -> . empty
    (22) addOp -> . PLUS_SYMBOL
    (23) addOp -> . MINUS_SYMBOL
    (50) empty -> .

  ! shift/reduce conflict for PLUS_SYMBOL resolved as shift.
  ! shift/reduce conflict for MINUS_SYMBOL resolved as shift.
    PLUS_SYMBOL     shift and go to state 53
    MINUS_SYMBOL    shift and go to state 52
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    AND_SYMBOL      reduce using rule 50 (empty -> .)
    OR_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)

  ! PLUS_SYMBOL     [ reduce using rule 50 (empty -> .) ]
  ! MINUS_SYMBOL    [ reduce using rule 50 (empty -> .) ]

    addOp           shift and go to state 54
    empty           shift and go to state 55
    partialIntExpr  shift and go to state 73

state 70

    (26) partialIntTerm -> multOp intFactor partialIntTerm .

    PLUS_SYMBOL     reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    MINUS_SYMBOL    reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    DELIMITER_SYMBOL reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    INLINE_ELSE_SYMBOL reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    INLINE_FI_SYMBOL reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    LT_SYMBOL       reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    LE_SYMBOL       reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    EQ_SYMBOL       reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    GE_SYMBOL       reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    GT_SYMBOL       reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    NE_SYMBOL       reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    AND_SYMBOL      reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    OR_SYMBOL       reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)
    INLINE_THEN_SYMBOL reduce using rule 26 (partialIntTerm -> multOp intFactor partialIntTerm .)



state 71

    (38) boolExpr -> intExpr relationOp intExpr . partialBoolExpr
    (36) partialBoolExpr -> . boolOp intExpr relationOp intExpr partialBoolExpr
    (37) partialBoolExpr -> . empty
    (39) boolOp -> . AND_SYMBOL
    (40) boolOp -> . OR_SYMBOL
    (50) empty -> .

  ! shift/reduce conflict for AND_SYMBOL resolved as shift.
  ! shift/reduce conflict for OR_SYMBOL resolved as shift.
    AND_SYMBOL      shift and go to state 77
    OR_SYMBOL       shift and go to state 76
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)

  ! AND_SYMBOL      [ reduce using rule 50 (empty -> .) ]
  ! OR_SYMBOL       [ reduce using rule 50 (empty -> .) ]

    boolOp          shift and go to state 74
    empty           shift and go to state 78
    partialBoolExpr shift and go to state 75

state 72

    (35) inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr . INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    INLINE_ELSE_SYMBOL shift and go to state 79



state 73

    (20) partialIntExpr -> addOp intTerm partialIntExpr .

    DELIMITER_SYMBOL reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    INLINE_ELSE_SYMBOL reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    INLINE_FI_SYMBOL reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    LT_SYMBOL       reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    LE_SYMBOL       reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    EQ_SYMBOL       reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    GE_SYMBOL       reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    GT_SYMBOL       reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    NE_SYMBOL       reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    AND_SYMBOL      reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    OR_SYMBOL       reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)
    INLINE_THEN_SYMBOL reduce using rule 20 (partialIntExpr -> addOp intTerm partialIntExpr .)



state 74

    (36) partialBoolExpr -> boolOp . intExpr relationOp intExpr partialBoolExpr
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 80
    intFactor       shift and go to state 28
    integer         shift and go to state 34
    intTerm         shift and go to state 36

state 75

    (38) boolExpr -> intExpr relationOp intExpr partialBoolExpr .

    INLINE_THEN_SYMBOL reduce using rule 38 (boolExpr -> intExpr relationOp intExpr partialBoolExpr .)



state 76

    (40) boolOp -> OR_SYMBOL .

    MINUS_SYMBOL    reduce using rule 40 (boolOp -> OR_SYMBOL .)
    IDENTIFIER      reduce using rule 40 (boolOp -> OR_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 40 (boolOp -> OR_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 40 (boolOp -> OR_SYMBOL .)
    ANY_DIGIT       reduce using rule 40 (boolOp -> OR_SYMBOL .)



state 77

    (39) boolOp -> AND_SYMBOL .

    MINUS_SYMBOL    reduce using rule 39 (boolOp -> AND_SYMBOL .)
    IDENTIFIER      reduce using rule 39 (boolOp -> AND_SYMBOL .)
    OPEN_PARAENTHESIS_SYMBOL reduce using rule 39 (boolOp -> AND_SYMBOL .)
    INLINE_IF_SYMBOL reduce using rule 39 (boolOp -> AND_SYMBOL .)
    ANY_DIGIT       reduce using rule 39 (boolOp -> AND_SYMBOL .)



state 78

    (37) partialBoolExpr -> empty .

    INLINE_THEN_SYMBOL reduce using rule 37 (partialBoolExpr -> empty .)



state 79

    (35) inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL . intExpr INLINE_FI_SYMBOL
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    intFactor       shift and go to state 28
    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 81
    integer         shift and go to state 34
    intTerm         shift and go to state 36

state 80

    (36) partialBoolExpr -> boolOp intExpr . relationOp intExpr partialBoolExpr
    (41) relationOp -> . LT_SYMBOL
    (42) relationOp -> . LE_SYMBOL
    (43) relationOp -> . EQ_SYMBOL
    (44) relationOp -> . GE_SYMBOL
    (45) relationOp -> . GT_SYMBOL
    (46) relationOp -> . NE_SYMBOL

    LT_SYMBOL       shift and go to state 61
    LE_SYMBOL       shift and go to state 60
    EQ_SYMBOL       shift and go to state 63
    GE_SYMBOL       shift and go to state 65
    GT_SYMBOL       shift and go to state 64
    NE_SYMBOL       shift and go to state 59


    relationOp      shift and go to state 82

state 81

    (35) inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr . INLINE_FI_SYMBOL

    INLINE_FI_SYMBOL shift and go to state 83



state 82

    (36) partialBoolExpr -> boolOp intExpr relationOp . intExpr partialBoolExpr
    (18) intExpr -> . MINUS_SYMBOL intTerm partialIntExpr
    (19) intExpr -> . intTerm partialIntExpr
    (24) intTerm -> . intFactor
    (25) intTerm -> . intFactor partialIntTerm
    (28) intFactor -> . integer
    (29) intFactor -> . IDENTIFIER
    (30) intFactor -> . OPEN_PARAENTHESIS_SYMBOL intExpr CLOSE_PARAENTHESIS_SYMBOL
    (31) intFactor -> . inlineIfStatement
    (47) integer -> . ANY_DIGIT digits
    (35) inlineIfStatement -> . INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL

    MINUS_SYMBOL    shift and go to state 27
    IDENTIFIER      shift and go to state 35
    OPEN_PARAENTHESIS_SYMBOL shift and go to state 31
    ANY_DIGIT       shift and go to state 32
    INLINE_IF_SYMBOL shift and go to state 30


    inlineIfStatement shift and go to state 29
    intExpr         shift and go to state 84
    intFactor       shift and go to state 28
    integer         shift and go to state 34
    intTerm         shift and go to state 36

state 83

    (35) inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .

    PLUS_SYMBOL     reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    MINUS_SYMBOL    reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    DELIMITER_SYMBOL reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    TIMES_SYMBOL    reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    DIVIDE_SYMBOL   reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    MODULO_SYMBOL   reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    INLINE_ELSE_SYMBOL reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    INLINE_FI_SYMBOL reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    LT_SYMBOL       reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    LE_SYMBOL       reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    EQ_SYMBOL       reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    GE_SYMBOL       reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    GT_SYMBOL       reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    NE_SYMBOL       reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    AND_SYMBOL      reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    OR_SYMBOL       reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)
    INLINE_THEN_SYMBOL reduce using rule 35 (inlineIfStatement -> INLINE_IF_SYMBOL boolExpr INLINE_THEN_SYMBOL intExpr INLINE_ELSE_SYMBOL intExpr INLINE_FI_SYMBOL .)



state 84

    (36) partialBoolExpr -> boolOp intExpr relationOp intExpr . partialBoolExpr
    (36) partialBoolExpr -> . boolOp intExpr relationOp intExpr partialBoolExpr
    (37) partialBoolExpr -> . empty
    (39) boolOp -> . AND_SYMBOL
    (40) boolOp -> . OR_SYMBOL
    (50) empty -> .

  ! shift/reduce conflict for AND_SYMBOL resolved as shift.
  ! shift/reduce conflict for OR_SYMBOL resolved as shift.
    AND_SYMBOL      shift and go to state 77
    OR_SYMBOL       shift and go to state 76
    $               reduce using rule 50 (empty -> .)
    DELIMITER_SYMBOL reduce using rule 50 (empty -> .)
    PLUS_SYMBOL     reduce using rule 50 (empty -> .)
    MINUS_SYMBOL    reduce using rule 50 (empty -> .)
    TIMES_SYMBOL    reduce using rule 50 (empty -> .)
    DIVIDE_SYMBOL   reduce using rule 50 (empty -> .)
    MODULO_SYMBOL   reduce using rule 50 (empty -> .)
    CLOSE_PARAENTHESIS_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_ELSE_SYMBOL reduce using rule 50 (empty -> .)
    INLINE_FI_SYMBOL reduce using rule 50 (empty -> .)
    LT_SYMBOL       reduce using rule 50 (empty -> .)
    LE_SYMBOL       reduce using rule 50 (empty -> .)
    EQ_SYMBOL       reduce using rule 50 (empty -> .)
    GE_SYMBOL       reduce using rule 50 (empty -> .)
    GT_SYMBOL       reduce using rule 50 (empty -> .)
    NE_SYMBOL       reduce using rule 50 (empty -> .)
    INLINE_THEN_SYMBOL reduce using rule 50 (empty -> .)

  ! AND_SYMBOL      [ reduce using rule 50 (empty -> .) ]
  ! OR_SYMBOL       [ reduce using rule 50 (empty -> .) ]

    partialBoolExpr shift and go to state 85
    boolOp          shift and go to state 74
    empty           shift and go to state 78

state 85

    (36) partialBoolExpr -> boolOp intExpr relationOp intExpr partialBoolExpr .

    INLINE_THEN_SYMBOL reduce using rule 36 (partialBoolExpr -> boolOp intExpr relationOp intExpr partialBoolExpr .)


